// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VectorIdentityAPI.Database;

namespace VectorIdentityAPI.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210419183928_removeRequiredFileType")]
    partial class removeRequiredFileType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VectorIdentityAPI.Database.Arc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AngleEnd")
                        .HasColumnType("float");

                    b.Property<double>("AngleStart")
                        .HasColumnType("float");

                    b.Property<double>("DX")
                        .HasColumnType("float");

                    b.Property<double>("DY")
                        .HasColumnType("float");

                    b.Property<double>("DZ")
                        .HasColumnType("float");

                    b.Property<string>("Handle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectDataId")
                        .HasColumnType("int");

                    b.Property<double>("Radius")
                        .HasColumnType("float");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.Property<double>("Z")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectDataId");

                    b.ToTable("Arc");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.ComparisonData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProjectAId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectBId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectAId");

                    b.HasIndex("ProjectBId");

                    b.ToTable("ComparisonData");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.Line", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("DX")
                        .HasColumnType("float");

                    b.Property<double>("DY")
                        .HasColumnType("float");

                    b.Property<double>("DZ")
                        .HasColumnType("float");

                    b.Property<string>("Handle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Layer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Magnitude")
                        .HasColumnType("float");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<double>("X1")
                        .HasColumnType("float");

                    b.Property<double>("X2")
                        .HasColumnType("float");

                    b.Property<double>("Y1")
                        .HasColumnType("float");

                    b.Property<double>("Y2")
                        .HasColumnType("float");

                    b.Property<double>("Z1")
                        .HasColumnType("float");

                    b.Property<double>("Z2")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArcAId")
                        .HasColumnType("int");

                    b.Property<int?>("ArcBId")
                        .HasColumnType("int");

                    b.Property<int?>("ComparisonDataId")
                        .HasColumnType("int");

                    b.Property<int?>("LineAId")
                        .HasColumnType("int");

                    b.Property<int?>("LineBId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArcAId");

                    b.HasIndex("ArcBId");

                    b.HasIndex("ComparisonDataId");

                    b.HasIndex("LineAId");

                    b.HasIndex("LineBId");

                    b.ToTable("Match");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.ProjectData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date")
                        .HasColumnName("date_created");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("date")
                        .HasColumnName("date_updated");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("date")
                        .HasColumnName("date_uploaded");

                    b.Property<byte[]>("FileData")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("file_data");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_type");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<bool>("Original")
                        .HasColumnType("bit")
                        .HasColumnName("original");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<int>("ProjectSetId")
                        .HasColumnType("int")
                        .HasColumnName("projectset_id");

                    b.Property<double>("ScoreCorrectness")
                        .HasColumnType("float")
                        .HasColumnName("score_correctness");

                    b.Property<double>("ScoreIdentity")
                        .HasColumnType("float")
                        .HasColumnName("score_identity");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProjectSetId");

                    b.ToTable("projectdata");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.ProjectSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("projectset");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("firstname");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("lastname");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_salt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("user_data_email_key");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("user_data_username_key");

                    b.ToTable("user_data");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.Arc", b =>
                {
                    b.HasOne("VectorIdentityAPI.Database.ProjectData", null)
                        .WithMany("Arcs")
                        .HasForeignKey("ProjectDataId");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.ComparisonData", b =>
                {
                    b.HasOne("VectorIdentityAPI.Database.ProjectData", "ProjectA")
                        .WithMany()
                        .HasForeignKey("ProjectAId");

                    b.HasOne("VectorIdentityAPI.Database.ProjectData", "ProjectB")
                        .WithMany()
                        .HasForeignKey("ProjectBId");

                    b.Navigation("ProjectA");

                    b.Navigation("ProjectB");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.Line", b =>
                {
                    b.HasOne("VectorIdentityAPI.Database.ProjectData", "Project")
                        .WithMany("Lines")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.Match", b =>
                {
                    b.HasOne("VectorIdentityAPI.Database.Arc", "ArcA")
                        .WithMany()
                        .HasForeignKey("ArcAId");

                    b.HasOne("VectorIdentityAPI.Database.Arc", "ArcB")
                        .WithMany()
                        .HasForeignKey("ArcBId");

                    b.HasOne("VectorIdentityAPI.Database.ComparisonData", null)
                        .WithMany("Matches")
                        .HasForeignKey("ComparisonDataId");

                    b.HasOne("VectorIdentityAPI.Database.Line", "LineA")
                        .WithMany()
                        .HasForeignKey("LineAId");

                    b.HasOne("VectorIdentityAPI.Database.Line", "LineB")
                        .WithMany()
                        .HasForeignKey("LineBId");

                    b.Navigation("ArcA");

                    b.Navigation("ArcB");

                    b.Navigation("LineA");

                    b.Navigation("LineB");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.ProjectData", b =>
                {
                    b.HasOne("VectorIdentityAPI.Database.User", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("projectdata_owner_id_fkey")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("VectorIdentityAPI.Database.ProjectSet", "ProjectSet")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectSetId")
                        .HasConstraintName("projectdata_projectset_id_fkey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("ProjectSet");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.ProjectSet", b =>
                {
                    b.HasOne("VectorIdentityAPI.Database.User", "Owner")
                        .WithMany("ProjectSets")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("projectset_owner_id_fkey")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.ComparisonData", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.ProjectData", b =>
                {
                    b.Navigation("Arcs");

                    b.Navigation("Lines");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.ProjectSet", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("VectorIdentityAPI.Database.User", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("ProjectSets");
                });
#pragma warning restore 612, 618
        }
    }
}
